#!/bin/bash

VERSION_FILE=$(dirname $0)/version
DEPLOY_YML=$(dirname $0)/deploy.yml
CREDENTIALS=$(dirname $0)/credentials
CURRENT_VERSION=$(cat ${VERSION_FILE})
LAST_VERSION=$(curl -H 'Cache-Control:max-age=0' -s https://raw.githubusercontent.com/AntonSizov/eng-deploy-pmm/master/version)

if [[ "$CURRENT_VERSION" -lt "$LAST_VERSION" ]]; then
    echo "You version of script is outdated, please update it:"
    echo
    echo "$ git pull origin master"
    echo
    echo "Current version:" $CURRENT_VERSION
    echo "Last available version:" $LAST_VERSION
    exit 1
fi

if [ -f ${CREDENTIALS} ];then
    . ${CREDENTIALS}
fi

containsElement () {
    local e
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
    return 1
}

declare -a hosts
hosts=(
    zain-sa-m3
    zain-sa-pp
    zain-sa-stg
    zain-kw-stg
    zain-kw-pp
    batelco-stg
    qtel-stg
    asiacell-stg
    asiacell-pp
    pmmv6-stg
)

declare -a services
services=(
    funnel
    just
    standalone_j3
)

function print_help {
    echo "Usage: [SUS_USERNAME=<name> SUS_PASSWORD=<pass>] ./deploy <HOST> <SERVICE> <VERSION>"
    echo "Where:"
    echo "  HOST: ${hosts[@]} <user>@<host>:<port>"
    echo "  SERVICE: ${services[@]}"
    echo "  VERSION: by default from config file"
    echo ""
    echo "You can also provide credentials with 'credentials' file:"
    echo "$ echo -e \"SUS_USERNAME=<name>\nSUS_PASSWORD=<pass>\" > credentials"
    echo ""
    echo "You can also setup script to ask ssh password:"
    echo "$ echo \"ASK_PASSWORD=-k\" >> credentials"
    echo ""
    echo "To deploy standalone version of Just:"
    echo "$ ./deploy <user>@<host>:<port> standalone_j3 <JustVersion>"
    echo "Currently only Just version 3.8.0-devel-1 supports"
    echo "standalone mode"
}

if [[ "$SUS_USERNAME" == "" ]];then
    printf "\e[1;33m[ERR] Please provide sus username\e[0m\n"
    print_help
    exit 1
fi

if [[ "$SUS_PASSWORD" == "" ]];then
    printf "\e[1;33m[ERR] Please provide sus password\e[0m\n"
    print_help
    exit 1
fi


if [[ $# < 2 ]]; then
    print_help
    exit 1
fi

host_name=$1
service_name=$2
version=$3

containsElement "$host_name" "${hosts[@]}"
if [[ $(echo $?) == "0" ]]; then
    host_name=$(dirname $0)/inventories/${host_name}
else
    host_name=${host_name},
    printf "\e[1;33m[WARN] Unknown host: $host_name\e[0m\n"
fi

containsElement "$service_name" "${services[@]}"
if [[ $(echo $?) == "1" ]]; then
    printf "\e[1;33m[ERR] Unknown service: $service_name\e[0m\n"
    print_help
    exit 1
fi

service_version=''
if [[ -z $version ]]; then
    printf "\e[1;33m[ERR] Missed service version\e[0m\n"
    print_help
    exit 1
else
    service_version="--extra-vars service_version=${version}"
fi

# ansible all -i inventories/${host_name} -m ping || exit 1
export SUS_PASSWORD
export SUS_USERNAME
# ansible-playbook ${ASK_PASSWORD} ${DEPLOY_YML} -i ${host_name} --tags "eng, ${service_name}" ${service_version} || exit 1
ansible-playbook ${ASK_PASSWORD} ${DEPLOY_YML} -i ${host_name} --tags ${service_name} ${service_version} || exit 1
