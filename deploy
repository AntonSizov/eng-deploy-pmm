#!/bin/bash

echo "$(dirname $(readlink -f "$0"))"
BASEDIR="$(dirname $(readlink -f "$0"))"

cd $BASEDIR

ONLY_ENG_CONFIG=$4
if [[ "${ONLY_ENG_CONFIG}" == "" ]]; then
    ONLY_ENG_CONFIG="false"
else
    ONLY_ENG_CONFIG="true"
fi

VERSION_FILE=./version
DEPLOY_YML=./deploy.yml
CREDENTIALS=./credentials
CURRENT_VERSION=$(cat ${VERSION_FILE})
LAST_VERSION=$(curl -H 'Cache-Control:max-age=0' -s https://raw.githubusercontent.com/AntonSizov/eng-deploy-pmm/master/version)

if [[ ("${ONLY_ENG_CONFIG}" == "true") && ("$CURRENT_VERSION" -lt "$LAST_VERSION") ]]; then
    echo "You version of script is outdated, please update it:"
    echo
    echo "$ git pull origin master"
    echo
    echo "Current version:" $CURRENT_VERSION
    echo "Last available version:" $LAST_VERSION
    exit 1
fi

if [ -f ${CREDENTIALS} ];then
    . ${CREDENTIALS}
fi

COMMIT_HASH=$(git log -1 | head -1 | awk '{print $2}' | cut -c 1-7)

USER=$(whoami)
if [[ "$USER" == "root" ]]; then
    DOCKER_BASE="/etc/ansible/playbooks/eng-deploy-pmm"
    if [[ "$(dirname ${BASEDIR})" == "$DOCKER_BASE" ]]; then
        USER=$(basename ${BASEDIR})
    else
        USER="unknown"
    fi
fi

containsElement () {
    local e
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
    return 1
}

declare -a hosts
hosts=(
    mobily-stg
    mtn-stg
    mtn-prod
    zain-sa-prod
    zain-sa-m3
    zain-sa-pp
    zain-sa-stg
    zain-sa-testbed
    zain-sa-conf
    zain-kw-stg
    zain-kw-pp
    zain-kw-conf
    batelco-stg
    batelco-pp
    batelco-conf
    qtel-stg
    qtel-conf
    asiacell-stg
    asiacell-pp
    asiacell-conf
    pmmv6-stg
    pmmv6-conf
    pmmv6-prod
    viva-stg
    viva-conf
)

declare -a services
services=(
    funnel
    just
    standalone_j3
    standalone_fun
    eng
    smppload
    smppsink
)

function print_help {
    echo "Usage: [SUS_USERNAME=<name> SUS_PASSWORD=<pass>] ./deploy <HOST> <SERVICE> <VERSION>"
    echo "Where:"
    echo "  HOST: ${hosts[@]} <user>@<host>:<port>"
    echo "  SERVICE: ${services[@]}"
    echo "  VERSION: by default from config file"
    echo ""
    echo "To generate config for funnel 3.5.9 ZainSA and commit hash 1234567:"
    echo "./get_config zain-sa-stg funnel 3.5.9 1234567"
    echo ""
    echo "You can also provide credentials with 'credentials' file:"
    echo "$ echo -e \"SUS_USERNAME=<name>\nSUS_PASSWORD=<pass>\" > credentials"
    echo ""
    echo "You can also setup script to ask ssh password:"
    echo "$ echo \"ASK_PASSWORD=-k\" >> credentials"
    echo ""
    echo "To deploy standalone version of Just:"
    echo "$ ./deploy <user>@<host>:<port> standalone_j3 <JustVersion>"
    echo "Just should have version 3.8.0-devel-1 or higher"
    echo "for standalone mode"
    echo ""
    echo "To deploy standalone version of Funnel:"
    echo "$ ./deploy <user>@<host>:<port> eng <FunnelVersion>"
    echo "$ ./deploy <user>@<host>:<port> standalone_fun <FunnelVersion>"
    echo "Funnel should have version 3.6.0-devel-7 or higher"
    echo "for standalone mode"
    echo ""
    echo "To create test node with smppload -> funnel -> rabbitmq -> j3 -> smppsink :"
    echo "$ ./deploy <user>@<host>:<port> standalone_j3 <JustVersion>"
    echo "$ ./deploy <user>@<host>:<port> standalone_fun <FunnelVersion>"
    echo "Start RabbitMQ, SMPPSink, J3, Funnel and send test message:"
    echo "$ smppload -P 8001 -t 1 -i user_id -p qwe123 -c 1 -b hello -d 375251234567"
    echo ""
    echo "To install erlang, rabbitmq, smppload, smppsim and rmq_tool:"
    echo "$ ./deploy <user>@<host>:<port> eng ignore_version"
}

if [[ "$SUS_USERNAME" == "" ]];then
    printf "\e[1;33m[ERR] Please provide sus username\e[0m\n"
    print_help
    exit 1
fi

if [[ "$SUS_PASSWORD" == "" ]];then
    printf "\e[1;33m[ERR] Please provide sus password\e[0m\n"
    print_help
    exit 1
fi


if [[ $# < 2 ]]; then
    echo "Missing args."
    print_help
    exit 1
fi

host_name=$1
service_name=$2
version=$3

containsElement "$host_name" "${hosts[@]}"
if [[ $(echo $?) == "0" ]]; then
    host_name=${BASEDIR}/inventories/${host_name}
else
    host_name=${host_name},
    printf "\e[1;33m[WARN] Unknown host: $host_name\e[0m\n"
fi

containsElement "$service_name" "${services[@]}"
if [[ $(echo $?) == "1" ]]; then
    printf "\e[1;33m[ERR] Unknown service: $service_name\e[0m\n"
    print_help
    exit 1
fi

if [[ -z $version ]]; then
    printf "\e[1;33m[ERR] Missed service version\e[0m\n"
    print_help
    exit 1
fi

INFO_STRING="${USER} $(date '+%Y-%m-%d %H:%M:%S') ${COMMIT_HASH} ${service_name} ${version}"

# ansible all -i inventories/${host_name} -m ping || exit 1
export SUS_PASSWORD
export SUS_USERNAME
ansible-playbook ${ASK_PASSWORD} ${DEPLOY_YML} -i ${host_name} \
                 --tags ${service_name} \
                 --extra-vars "{\"only_eng_config\":${ONLY_ENG_CONFIG},\"service_version\":\"${version}\",\"info_string\":\"${INFO_STRING}\",\"commit_hash\":\"${COMMIT_HASH}\"}" || exit 1
